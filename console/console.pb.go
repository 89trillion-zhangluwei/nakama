// Copyright 2018 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//*
// The RPC protocol for the developer console.

// Code generated by protoc-gen-go. DO NOT EDIT.
<<<<<<< HEAD
// versions:
// 	protoc-gen-go v1.25.0
<<<<<<< HEAD
// 	protoc        v3.11.4
=======
// 	protoc        v3.13.0
=======
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
>>>>>>> ad4e36bc... Reimplement Nakama Console with Angular 10.
// source: console.proto

package console

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	api "github.com/heroiclabs/nakama-common/api"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
<<<<<<< HEAD
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
=======
	math "math"
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Account information.
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's account details.
	Account *api.Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The UNIX time when the account was disabled.
	DisableTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=disable_time,json=disableTime,proto3" json:"disable_time,omitempty"`
}

<<<<<<< HEAD
func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{0}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{0}
}

func (x *Account) GetAccount() *api.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Account) GetDisableTime() *timestamp.Timestamp {
	if x != nil {
		return x.DisableTime
	}
	return nil
}

// Delete a user account.
type AccountDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the user account.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Record the user deletion - used for GDPR compliance.
	RecordDeletion *wrappers.BoolValue `protobuf:"bytes,2,opt,name=record_deletion,json=recordDeletion,proto3" json:"record_deletion,omitempty"`
}

<<<<<<< HEAD
func (x *AccountDeleteRequest) Reset() {
	*x = AccountDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *AccountDeleteRequest) Reset()         { *m = AccountDeleteRequest{} }
func (m *AccountDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*AccountDeleteRequest) ProtoMessage()    {}
func (*AccountDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{1}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *AccountDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDeleteRequest) ProtoMessage() {}

func (x *AccountDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDeleteRequest.ProtoReflect.Descriptor instead.
func (*AccountDeleteRequest) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{1}
}

func (x *AccountDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountDeleteRequest) GetRecordDeletion() *wrappers.BoolValue {
	if x != nil {
		return x.RecordDeletion
	}
	return nil
}

// An export of all information stored for a user account.
type AccountExport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's account details.
	Account *api.Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The user's storage.
	Objects []*api.StorageObject `protobuf:"bytes,2,rep,name=objects,proto3" json:"objects,omitempty"`
	// The user's friends.
	Friends []*api.Friend `protobuf:"bytes,3,rep,name=friends,proto3" json:"friends,omitempty"`
	// The user's groups.
	Groups []*api.Group `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`
	// The user's chat messages.
	Messages []*api.ChannelMessage `protobuf:"bytes,5,rep,name=messages,proto3" json:"messages,omitempty"`
	// The user's leaderboard records.
	LeaderboardRecords []*api.LeaderboardRecord `protobuf:"bytes,6,rep,name=leaderboard_records,json=leaderboardRecords,proto3" json:"leaderboard_records,omitempty"`
	// The user's notifications.
	Notifications []*api.Notification `protobuf:"bytes,7,rep,name=notifications,proto3" json:"notifications,omitempty"`
	// The user's wallet ledger items.
	WalletLedgers []*WalletLedger `protobuf:"bytes,8,rep,name=wallet_ledgers,json=walletLedgers,proto3" json:"wallet_ledgers,omitempty"`
}

<<<<<<< HEAD
func (x *AccountExport) Reset() {
	*x = AccountExport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *AccountExport) Reset()         { *m = AccountExport{} }
func (m *AccountExport) String() string { return proto.CompactTextString(m) }
func (*AccountExport) ProtoMessage()    {}
func (*AccountExport) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{2}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *AccountExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountExport) ProtoMessage() {}

func (x *AccountExport) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountExport.ProtoReflect.Descriptor instead.
func (*AccountExport) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{2}
}

func (x *AccountExport) GetAccount() *api.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *AccountExport) GetObjects() []*api.StorageObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *AccountExport) GetFriends() []*api.Friend {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *AccountExport) GetGroups() []*api.Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *AccountExport) GetMessages() []*api.ChannelMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *AccountExport) GetLeaderboardRecords() []*api.LeaderboardRecord {
	if x != nil {
		return x.LeaderboardRecords
	}
	return nil
}

func (x *AccountExport) GetNotifications() []*api.Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *AccountExport) GetWalletLedgers() []*WalletLedger {
	if x != nil {
		return x.WalletLedgers
	}
	return nil
}

// The identifier for a user account.
type AccountId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the user account.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

<<<<<<< HEAD
func (x *AccountId) Reset() {
	*x = AccountId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *AccountId) Reset()         { *m = AccountId{} }
func (m *AccountId) String() string { return proto.CompactTextString(m) }
func (*AccountId) ProtoMessage()    {}
func (*AccountId) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{3}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *AccountId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountId) ProtoMessage() {}

func (x *AccountId) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountId.ProtoReflect.Descriptor instead.
func (*AccountId) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{3}
}

func (x *AccountId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Authenticate a console user with username and password.
type AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username of the user.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The password of the user.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

<<<<<<< HEAD
func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *AuthenticateRequest) Reset()         { *m = AuthenticateRequest{} }
func (m *AuthenticateRequest) String() string { return proto.CompactTextString(m) }
func (*AuthenticateRequest) ProtoMessage()    {}
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{4}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{4}
}

func (x *AuthenticateRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthenticateRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// The current server configuration and any associated warnings.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JSON-encoded active server configuration.
	Config string `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Any warnings about the current config.
	Warnings []*Config_Warning `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// Server version
	ServerVersion string `protobuf:"bytes,3,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
}

<<<<<<< HEAD
func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{5}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{5}
}

func (x *Config) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

<<<<<<< HEAD
func (x *Config) GetWarnings() []*Config_Warning {
	if x != nil {
		return x.Warnings
=======
// A warning for a configuration field.
type Config_Warning struct {
	// The config field this warning is for in a JSON pointer format.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Warning message text.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config_Warning) Reset()         { *m = Config_Warning{} }
func (m *Config_Warning) String() string { return proto.CompactTextString(m) }
func (*Config_Warning) ProtoMessage()    {}
func (*Config_Warning) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{5, 0}
}

func (m *Config_Warning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config_Warning.Unmarshal(m, b)
}
func (m *Config_Warning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config_Warning.Marshal(b, m, deterministic)
}
func (m *Config_Warning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config_Warning.Merge(m, src)
}
func (m *Config_Warning) XXX_Size() int {
	return xxx_messageInfo_Config_Warning.Size(m)
}
func (m *Config_Warning) XXX_DiscardUnknown() {
	xxx_messageInfo_Config_Warning.DiscardUnknown(m)
}

var xxx_messageInfo_Config_Warning proto.InternalMessageInfo

func (m *Config_Warning) GetField() string {
	if m != nil {
		return m.Field
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
	}
	return nil
}

func (x *Config) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

// A console user session.
type ConsoleSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A session token (JWT) for the console user.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

<<<<<<< HEAD
func (x *ConsoleSession) Reset() {
	*x = ConsoleSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *ConsoleSession) Reset()         { *m = ConsoleSession{} }
func (m *ConsoleSession) String() string { return proto.CompactTextString(m) }
func (*ConsoleSession) ProtoMessage()    {}
func (*ConsoleSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{6}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *ConsoleSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsoleSession) ProtoMessage() {}

func (x *ConsoleSession) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsoleSession.ProtoReflect.Descriptor instead.
func (*ConsoleSession) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{6}
}

func (x *ConsoleSession) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Delete friend relationship between two users.
type DeleteFriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user do delete for.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User ID of the friend to remove.
	FriendId string `protobuf:"bytes,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
}

<<<<<<< HEAD
func (x *DeleteFriendRequest) Reset() {
	*x = DeleteFriendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *DeleteFriendRequest) Reset()         { *m = DeleteFriendRequest{} }
func (m *DeleteFriendRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteFriendRequest) ProtoMessage()    {}
func (*DeleteFriendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{7}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *DeleteFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendRequest) ProtoMessage() {}

func (x *DeleteFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendRequest.ProtoReflect.Descriptor instead.
func (*DeleteFriendRequest) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteFriendRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteFriendRequest) GetFriendId() string {
	if x != nil {
		return x.FriendId
	}
	return ""
}

// Remove a user from a group.
type DeleteGroupUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User to remove.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the group to remove them from.
	GroupId string `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

<<<<<<< HEAD
func (x *DeleteGroupUserRequest) Reset() {
	*x = DeleteGroupUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *DeleteGroupUserRequest) Reset()         { *m = DeleteGroupUserRequest{} }
func (m *DeleteGroupUserRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteGroupUserRequest) ProtoMessage()    {}
func (*DeleteGroupUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{8}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *DeleteGroupUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupUserRequest) ProtoMessage() {}

func (x *DeleteGroupUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteGroupUserRequest) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteGroupUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteGroupUserRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// Delete an individual storage object.
type DeleteStorageObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Collection.
	Collection string `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	// Key.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Owner user ID.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Version for OCC.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

<<<<<<< HEAD
func (x *DeleteStorageObjectRequest) Reset() {
	*x = DeleteStorageObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *DeleteStorageObjectRequest) Reset()         { *m = DeleteStorageObjectRequest{} }
func (m *DeleteStorageObjectRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteStorageObjectRequest) ProtoMessage()    {}
func (*DeleteStorageObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{9}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *DeleteStorageObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStorageObjectRequest) ProtoMessage() {}

func (x *DeleteStorageObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStorageObjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteStorageObjectRequest) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteStorageObjectRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *DeleteStorageObjectRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeleteStorageObjectRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteStorageObjectRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Delete a single wallet ledger item.
type DeleteWalletLedgerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID to remove wallet ledger item from.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the wallet ledger item to remove.
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

<<<<<<< HEAD
func (x *DeleteWalletLedgerRequest) Reset() {
	*x = DeleteWalletLedgerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *DeleteWalletLedgerRequest) Reset()         { *m = DeleteWalletLedgerRequest{} }
func (m *DeleteWalletLedgerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteWalletLedgerRequest) ProtoMessage()    {}
func (*DeleteWalletLedgerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{10}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *DeleteWalletLedgerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWalletLedgerRequest) ProtoMessage() {}

func (x *DeleteWalletLedgerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWalletLedgerRequest.ProtoReflect.Descriptor instead.
func (*DeleteWalletLedgerRequest) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteWalletLedgerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteWalletLedgerRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

// List (and optionally filter) storage objects.
type ListStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID to filter objects for.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

<<<<<<< HEAD
func (x *ListStorageRequest) Reset() {
	*x = ListStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *ListStorageRequest) Reset()         { *m = ListStorageRequest{} }
func (m *ListStorageRequest) String() string { return proto.CompactTextString(m) }
func (*ListStorageRequest) ProtoMessage()    {}
func (*ListStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{11}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *ListStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStorageRequest) ProtoMessage() {}

func (x *ListStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStorageRequest.ProtoReflect.Descriptor instead.
func (*ListStorageRequest) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{11}
}

func (x *ListStorageRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// List (and optionally filter) users.
type ListUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID or username filter.
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Search only banned users.
	Banned bool `protobuf:"varint,2,opt,name=banned,proto3" json:"banned,omitempty"`
	// Search only recorded deletes.
	Tombstones bool `protobuf:"varint,3,opt,name=tombstones,proto3" json:"tombstones,omitempty"`
}

<<<<<<< HEAD
func (x *ListUsersRequest) Reset() {
	*x = ListUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *ListUsersRequest) Reset()         { *m = ListUsersRequest{} }
func (m *ListUsersRequest) String() string { return proto.CompactTextString(m) }
func (*ListUsersRequest) ProtoMessage()    {}
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{12}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *ListUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersRequest) ProtoMessage() {}

func (x *ListUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersRequest.ProtoReflect.Descriptor instead.
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{12}
}

func (x *ListUsersRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListUsersRequest) GetBanned() bool {
	if x != nil {
		return x.Banned
	}
	return false
}

func (x *ListUsersRequest) GetTombstones() bool {
	if x != nil {
		return x.Tombstones
	}
	return false
}

// List of storage objects.
type StorageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of storage objects matching list/filter operation.
	Objects []*api.StorageObject `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
	// Approximate total number of storage objects.
	TotalCount int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

<<<<<<< HEAD
func (x *StorageList) Reset() {
	*x = StorageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *StorageList) Reset()         { *m = StorageList{} }
func (m *StorageList) String() string { return proto.CompactTextString(m) }
func (*StorageList) ProtoMessage()    {}
func (*StorageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{13}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *StorageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageList) ProtoMessage() {}

func (x *StorageList) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageList.ProtoReflect.Descriptor instead.
func (*StorageList) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{13}
}

func (x *StorageList) GetObjects() []*api.StorageObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *StorageList) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// Unlink a particular device ID from a user's account.
type UnlinkDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID to unlink from.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Device ID to unlink.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

<<<<<<< HEAD
func (x *UnlinkDeviceRequest) Reset() {
	*x = UnlinkDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *UnlinkDeviceRequest) Reset()         { *m = UnlinkDeviceRequest{} }
func (m *UnlinkDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*UnlinkDeviceRequest) ProtoMessage()    {}
func (*UnlinkDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{14}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *UnlinkDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlinkDeviceRequest) ProtoMessage() {}

func (x *UnlinkDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlinkDeviceRequest.ProtoReflect.Descriptor instead.
func (*UnlinkDeviceRequest) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{14}
}

func (x *UnlinkDeviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UnlinkDeviceRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

// Update user account information.
type UpdateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Username.
	Username *wrappers.StringValue `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Display name.
	DisplayName *wrappers.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Metadata.
	Metadata *wrappers.StringValue `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Avatar URL.
	AvatarUrl *wrappers.StringValue `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// Langtag.
	LangTag *wrappers.StringValue `protobuf:"bytes,6,opt,name=lang_tag,json=langTag,proto3" json:"lang_tag,omitempty"`
	// Location.
	Location *wrappers.StringValue `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	// Timezone.
	Timezone *wrappers.StringValue `protobuf:"bytes,8,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Custom ID.
	CustomId *wrappers.StringValue `protobuf:"bytes,9,opt,name=custom_id,json=customId,proto3" json:"custom_id,omitempty"`
	// Email.
	Email *wrappers.StringValue `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	// Password.
	Password *wrappers.StringValue `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	// Device ID modifications.
	DeviceIds map[string]string `protobuf:"bytes,12,rep,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Wallet.
	Wallet *wrappers.StringValue `protobuf:"bytes,13,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

<<<<<<< HEAD
func (x *UpdateAccountRequest) Reset() {
	*x = UpdateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *UpdateAccountRequest) Reset()         { *m = UpdateAccountRequest{} }
func (m *UpdateAccountRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAccountRequest) ProtoMessage()    {}
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{15}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *UpdateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountRequest) ProtoMessage() {}

func (x *UpdateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAccountRequest) GetUsername() *wrappers.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *UpdateAccountRequest) GetDisplayName() *wrappers.StringValue {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *UpdateAccountRequest) GetMetadata() *wrappers.StringValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateAccountRequest) GetAvatarUrl() *wrappers.StringValue {
	if x != nil {
		return x.AvatarUrl
	}
	return nil
}

func (x *UpdateAccountRequest) GetLangTag() *wrappers.StringValue {
	if x != nil {
		return x.LangTag
	}
	return nil
}

func (x *UpdateAccountRequest) GetLocation() *wrappers.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UpdateAccountRequest) GetTimezone() *wrappers.StringValue {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *UpdateAccountRequest) GetCustomId() *wrappers.StringValue {
	if x != nil {
		return x.CustomId
	}
	return nil
}

func (x *UpdateAccountRequest) GetEmail() *wrappers.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *UpdateAccountRequest) GetPassword() *wrappers.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *UpdateAccountRequest) GetDeviceIds() map[string]string {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

func (x *UpdateAccountRequest) GetWallet() *wrappers.StringValue {
	if x != nil {
		return x.Wallet
	}
	return nil
}

// A list of users.
type UserList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of users.
	Users []*api.User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	// Approximate total number of users.
	TotalCount int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

<<<<<<< HEAD
func (x *UserList) Reset() {
	*x = UserList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
=======
func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{16}
}

func (m *UserList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserList.Unmarshal(m, b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return xxx_messageInfo_UserList.Size(m)
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetUsers() []*api.User {
	if m != nil {
		return m.Users
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
	}
}

func (x *UserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

<<<<<<< HEAD
func (*UserList) ProtoMessage() {}
=======
func (m *StatusList) Reset()         { *m = StatusList{} }
func (m *StatusList) String() string { return proto.CompactTextString(m) }
func (*StatusList) ProtoMessage()    {}
func (*StatusList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{17}
}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.

func (x *UserList) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

<<<<<<< HEAD
// Deprecated: Use UserList.ProtoReflect.Descriptor instead.
func (*UserList) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{16}
=======
// The status of a Nakama node.
type StatusList_Status struct {
	// Node name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Health score.
	Health int32 `protobuf:"varint,2,opt,name=health,proto3" json:"health,omitempty"`
	// Currently connected sessions.
	SessionCount int32 `protobuf:"varint,3,opt,name=session_count,json=sessionCount,proto3" json:"session_count,omitempty"`
	// Currently registered live presences.
	PresenceCount int32 `protobuf:"varint,4,opt,name=presence_count,json=presenceCount,proto3" json:"presence_count,omitempty"`
	// Current number of active authoritative matches.
	MatchCount int32 `protobuf:"varint,5,opt,name=match_count,json=matchCount,proto3" json:"match_count,omitempty"`
	// Current number of running goroutines.
	GoroutineCount int32 `protobuf:"varint,6,opt,name=goroutine_count,json=goroutineCount,proto3" json:"goroutine_count,omitempty"`
	// Average response latency in milliseconds.
	AvgLatencyMs float64 `protobuf:"fixed64,7,opt,name=avg_latency_ms,json=avgLatencyMs,proto3" json:"avg_latency_ms,omitempty"`
	// Average number of requests per second.
	AvgRateSec float64 `protobuf:"fixed64,8,opt,name=avg_rate_sec,json=avgRateSec,proto3" json:"avg_rate_sec,omitempty"`
	// Average input bandwidth usage.
	AvgInputKbs float64 `protobuf:"fixed64,9,opt,name=avg_input_kbs,json=avgInputKbs,proto3" json:"avg_input_kbs,omitempty"`
	// Average output bandwidth usage.
	AvgOutputKbs         float64  `protobuf:"fixed64,10,opt,name=avg_output_kbs,json=avgOutputKbs,proto3" json:"avg_output_kbs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusList_Status) Reset()         { *m = StatusList_Status{} }
func (m *StatusList_Status) String() string { return proto.CompactTextString(m) }
func (*StatusList_Status) ProtoMessage()    {}
func (*StatusList_Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{17, 0}
}

func (m *StatusList_Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusList_Status.Unmarshal(m, b)
}
func (m *StatusList_Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusList_Status.Marshal(b, m, deterministic)
}
func (m *StatusList_Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusList_Status.Merge(m, src)
}
func (m *StatusList_Status) XXX_Size() int {
	return xxx_messageInfo_StatusList_Status.Size(m)
}
func (m *StatusList_Status) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusList_Status.DiscardUnknown(m)
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *UserList) GetUsers() []*api.User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *UserList) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// List of nodes and their stats.
type StatusList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of nodes and their stats.
	Nodes []*StatusList_Status `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *StatusList) Reset() {
	*x = StatusList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusList) ProtoMessage() {}

func (x *StatusList) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusList.ProtoReflect.Descriptor instead.
func (*StatusList) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{17}
}

func (x *StatusList) GetNodes() []*StatusList_Status {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// An individual update to a user's wallet.
type WalletLedger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of this wallet change.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The user ID this wallet ledger item belongs to.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The changeset.
	Changeset string `protobuf:"bytes,3,opt,name=changeset,proto3" json:"changeset,omitempty"`
	// Any associated metadata.
	Metadata string `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The UNIX time when the wallet ledger item was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The UNIX time when the wallet ledger item was updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

<<<<<<< HEAD
func (x *WalletLedger) Reset() {
	*x = WalletLedger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *WalletLedger) Reset()         { *m = WalletLedger{} }
func (m *WalletLedger) String() string { return proto.CompactTextString(m) }
func (*WalletLedger) ProtoMessage()    {}
func (*WalletLedger) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{18}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *WalletLedger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletLedger) ProtoMessage() {}

func (x *WalletLedger) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletLedger.ProtoReflect.Descriptor instead.
func (*WalletLedger) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{18}
}

func (x *WalletLedger) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WalletLedger) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WalletLedger) GetChangeset() string {
	if x != nil {
		return x.Changeset
	}
	return ""
}

func (x *WalletLedger) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *WalletLedger) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WalletLedger) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// List of wallet ledger items for a particular user.
type WalletLedgerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of wallet ledger items.
	Items []*WalletLedger `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

<<<<<<< HEAD
func (x *WalletLedgerList) Reset() {
	*x = WalletLedgerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *WalletLedgerList) Reset()         { *m = WalletLedgerList{} }
func (m *WalletLedgerList) String() string { return proto.CompactTextString(m) }
func (*WalletLedgerList) ProtoMessage()    {}
func (*WalletLedgerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{19}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *WalletLedgerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletLedgerList) ProtoMessage() {}

func (x *WalletLedgerList) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletLedgerList.ProtoReflect.Descriptor instead.
func (*WalletLedgerList) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{19}
}

func (x *WalletLedgerList) GetItems() []*WalletLedger {
	if x != nil {
		return x.Items
	}
	return nil
}

// Write a new storage object or update an existing one.
type WriteStorageObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Collection.
	Collection string `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	// Key.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Owner user ID.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Value.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Version for OCC.
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// Read permission value.
	PermissionRead *wrappers.Int32Value `protobuf:"bytes,6,opt,name=permission_read,json=permissionRead,proto3" json:"permission_read,omitempty"`
	// Write permission value.
	PermissionWrite *wrappers.Int32Value `protobuf:"bytes,7,opt,name=permission_write,json=permissionWrite,proto3" json:"permission_write,omitempty"`
}

<<<<<<< HEAD
func (x *WriteStorageObjectRequest) Reset() {
	*x = WriteStorageObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *WriteStorageObjectRequest) Reset()         { *m = WriteStorageObjectRequest{} }
func (m *WriteStorageObjectRequest) String() string { return proto.CompactTextString(m) }
func (*WriteStorageObjectRequest) ProtoMessage()    {}
func (*WriteStorageObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b2db7e2dd3bc0cc, []int{20}
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

func (x *WriteStorageObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteStorageObjectRequest) ProtoMessage() {}

func (x *WriteStorageObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteStorageObjectRequest.ProtoReflect.Descriptor instead.
func (*WriteStorageObjectRequest) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{20}
}

func (x *WriteStorageObjectRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *WriteStorageObjectRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WriteStorageObjectRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WriteStorageObjectRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *WriteStorageObjectRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WriteStorageObjectRequest) GetPermissionRead() *wrappers.Int32Value {
	if x != nil {
		return x.PermissionRead
	}
	return nil
}

func (x *WriteStorageObjectRequest) GetPermissionWrite() *wrappers.Int32Value {
	if x != nil {
		return x.PermissionWrite
	}
	return nil
}

// A warning for a configuration field.
type Config_Warning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The config field this warning is for in a JSON pointer format.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Warning message text.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Config_Warning) Reset() {
	*x = Config_Warning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Warning) ProtoMessage() {}

func (x *Config_Warning) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Warning.ProtoReflect.Descriptor instead.
func (*Config_Warning) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Config_Warning) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Config_Warning) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// The status of a Nakama node.
type StatusList_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Health score.
	Health int32 `protobuf:"varint,2,opt,name=health,proto3" json:"health,omitempty"`
	// Currently connected sessions.
	SessionCount int32 `protobuf:"varint,3,opt,name=session_count,json=sessionCount,proto3" json:"session_count,omitempty"`
	// Currently registered live presences.
	PresenceCount int32 `protobuf:"varint,4,opt,name=presence_count,json=presenceCount,proto3" json:"presence_count,omitempty"`
	// Current number of active authoritative matches.
	MatchCount int32 `protobuf:"varint,5,opt,name=match_count,json=matchCount,proto3" json:"match_count,omitempty"`
	// Current number of running goroutines.
	GoroutineCount int32 `protobuf:"varint,6,opt,name=goroutine_count,json=goroutineCount,proto3" json:"goroutine_count,omitempty"`
	// Average response latency in milliseconds.
	AvgLatencyMs float64 `protobuf:"fixed64,7,opt,name=avg_latency_ms,json=avgLatencyMs,proto3" json:"avg_latency_ms,omitempty"`
	// Average number of requests per second.
	AvgRateSec float64 `protobuf:"fixed64,8,opt,name=avg_rate_sec,json=avgRateSec,proto3" json:"avg_rate_sec,omitempty"`
	// Average input bandwidth usage.
	AvgInputKbs float64 `protobuf:"fixed64,9,opt,name=avg_input_kbs,json=avgInputKbs,proto3" json:"avg_input_kbs,omitempty"`
	// Average output bandwidth usage.
	AvgOutputKbs float64 `protobuf:"fixed64,10,opt,name=avg_output_kbs,json=avgOutputKbs,proto3" json:"avg_output_kbs,omitempty"`
}

func (x *StatusList_Status) Reset() {
	*x = StatusList_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_console_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusList_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusList_Status) ProtoMessage() {}

func (x *StatusList_Status) ProtoReflect() protoreflect.Message {
	mi := &file_console_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusList_Status.ProtoReflect.Descriptor instead.
func (*StatusList_Status) Descriptor() ([]byte, []int) {
	return file_console_proto_rawDescGZIP(), []int{17, 0}
}

func (x *StatusList_Status) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatusList_Status) GetHealth() int32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *StatusList_Status) GetSessionCount() int32 {
	if x != nil {
		return x.SessionCount
	}
	return 0
}

func (x *StatusList_Status) GetPresenceCount() int32 {
	if x != nil {
		return x.PresenceCount
	}
	return 0
}

<<<<<<< HEAD
func (x *StatusList_Status) GetMatchCount() int32 {
	if x != nil {
		return x.MatchCount
	}
	return 0
}

func (x *StatusList_Status) GetGoroutineCount() int32 {
	if x != nil {
		return x.GoroutineCount
	}
	return 0
}

func (x *StatusList_Status) GetAvgLatencyMs() float64 {
	if x != nil {
		return x.AvgLatencyMs
	}
	return 0
}

func (x *StatusList_Status) GetAvgRateSec() float64 {
	if x != nil {
		return x.AvgRateSec
	}
	return 0
}

func (x *StatusList_Status) GetAvgInputKbs() float64 {
	if x != nil {
		return x.AvgInputKbs
	}
	return 0
}

func (x *StatusList_Status) GetAvgOutputKbs() float64 {
	if x != nil {
		return x.AvgOutputKbs
	}
	return 0
}

var File_console_proto protoreflect.FileDescriptor

var file_console_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x1a,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x72, 0x6f,
	0x69, 0x63, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77, 0x0a, 0x07,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xd9, 0x03, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x12, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52,
	0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x73, 0x22, 0x1b,
	0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x13, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a,
	0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x39, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x42, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a,
	0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x48, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0x63, 0x0a,
	0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb6, 0x06, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x38, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x53, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa4, 0x03, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0xdc, 0x02, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x6f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x67,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6b,
	0x62, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x4b, 0x62, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x6b, 0x62, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61,
	0x76, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x0c,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x10, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xa4, 0x02, 0x0a, 0x19, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x46, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x32, 0xeb, 0x1c, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x08, 0x62, 0x06, 0x0a, 0x04, 0x0a, 0x00, 0x12, 0x00, 0x12, 0x62, 0x0a, 0x07, 0x42, 0x61,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x22, 0x1c, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x61, 0x6e, 0x12, 0x6f,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x80, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x12, 0x23, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2f, 0x7b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0x84, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x2a, 0x29,
	0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x5c, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x2a, 0x13, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x2a, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x70, 0x2a, 0x30, 0x2f, 0x76, 0x32,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x6b,
	0x65, 0x79, 0x7d, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x5a, 0x3c, 0x2a,
	0x3a, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x57, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x2a, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x8c, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x7b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0x72, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a,
	0x1d, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x62, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x1a, 0x17, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x12, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x57, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x12, 0x12, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x68, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x12, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x16, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f,
	0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x69,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x19, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5b, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x7b,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x6b, 0x65, 0x79,
	0x7d, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x19,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x6b, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x61, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x09, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x12, 0x71, 0x0a, 0x0c,
	0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x19, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12,
	0x7e, 0x0a, 0x0c, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x23, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x31, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x6f, 0x0a, 0x0b, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x25, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x6f, 0x0a, 0x0b, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x12,
	0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x25, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x12, 0x75, 0x0a, 0x0e, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x61, 0x63, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x12, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x28,
	0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2f,
	0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x8b, 0x01, 0x0a, 0x19, 0x55, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x22, 0x33, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x2f, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x79, 0x0a, 0x10, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x2a, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x71, 0x0a, 0x0c, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x12, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x12, 0x6f, 0x0a, 0x0b, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x12, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x25,
	0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x72, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x9a, 0x01, 0x0a, 0x12, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x29, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x6b, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x1a, 0x30, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x42, 0xda, 0x02, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x6c, 0x61, 0x62, 0x73,
	0x2f, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x92, 0x41, 0xad, 0x02, 0x12, 0x7d, 0x0a, 0x15, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x76, 0x32, 0x22,
	0x5f, 0x0a, 0x21, 0x54, 0x68, 0x65, 0x20, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x20, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x73, 0x20, 0x26, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x6c,
	0x61, 0x62, 0x73, 0x2f, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x1a, 0x14, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x40, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x32, 0x03, 0x32, 0x2e, 0x30, 0x1a, 0x0e, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31,
	0x3a, 0x37, 0x33, 0x35, 0x31, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x20, 0x0a, 0x0f,
	0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x02, 0x08, 0x01, 0x0a,
	0x0d, 0x0a, 0x09, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x12, 0x00, 0x62, 0x0f,
	0x0a, 0x0d, 0x0a, 0x09, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x4a, 0x77, 0x74, 0x12, 0x00, 0x72,
	0x42, 0x0a, 0x23, 0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_console_proto_rawDescOnce sync.Once
	file_console_proto_rawDescData = file_console_proto_rawDesc
)

func file_console_proto_rawDescGZIP() []byte {
	file_console_proto_rawDescOnce.Do(func() {
		file_console_proto_rawDescData = protoimpl.X.CompressGZIP(file_console_proto_rawDescData)
	})
	return file_console_proto_rawDescData
}

var file_console_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_console_proto_goTypes = []interface{}{
	(*Account)(nil),                    // 0: nakama.console.Account
	(*AccountDeleteRequest)(nil),       // 1: nakama.console.AccountDeleteRequest
	(*AccountExport)(nil),              // 2: nakama.console.AccountExport
	(*AccountId)(nil),                  // 3: nakama.console.AccountId
	(*AuthenticateRequest)(nil),        // 4: nakama.console.AuthenticateRequest
	(*Config)(nil),                     // 5: nakama.console.Config
	(*ConsoleSession)(nil),             // 6: nakama.console.ConsoleSession
	(*DeleteFriendRequest)(nil),        // 7: nakama.console.DeleteFriendRequest
	(*DeleteGroupUserRequest)(nil),     // 8: nakama.console.DeleteGroupUserRequest
	(*DeleteStorageObjectRequest)(nil), // 9: nakama.console.DeleteStorageObjectRequest
	(*DeleteWalletLedgerRequest)(nil),  // 10: nakama.console.DeleteWalletLedgerRequest
	(*ListStorageRequest)(nil),         // 11: nakama.console.ListStorageRequest
	(*ListUsersRequest)(nil),           // 12: nakama.console.ListUsersRequest
	(*StorageList)(nil),                // 13: nakama.console.StorageList
	(*UnlinkDeviceRequest)(nil),        // 14: nakama.console.UnlinkDeviceRequest
	(*UpdateAccountRequest)(nil),       // 15: nakama.console.UpdateAccountRequest
	(*UserList)(nil),                   // 16: nakama.console.UserList
	(*StatusList)(nil),                 // 17: nakama.console.StatusList
	(*WalletLedger)(nil),               // 18: nakama.console.WalletLedger
	(*WalletLedgerList)(nil),           // 19: nakama.console.WalletLedgerList
	(*WriteStorageObjectRequest)(nil),  // 20: nakama.console.WriteStorageObjectRequest
	(*Config_Warning)(nil),             // 21: nakama.console.Config.Warning
	nil,                                // 22: nakama.console.UpdateAccountRequest.DeviceIdsEntry
	(*StatusList_Status)(nil),          // 23: nakama.console.StatusList.Status
	(*api.Account)(nil),                // 24: nakama.api.Account
	(*timestamp.Timestamp)(nil),        // 25: google.protobuf.Timestamp
	(*wrappers.BoolValue)(nil),         // 26: google.protobuf.BoolValue
	(*api.StorageObject)(nil),          // 27: nakama.api.StorageObject
	(*api.Friend)(nil),                 // 28: nakama.api.Friend
	(*api.Group)(nil),                  // 29: nakama.api.Group
	(*api.ChannelMessage)(nil),         // 30: nakama.api.ChannelMessage
	(*api.LeaderboardRecord)(nil),      // 31: nakama.api.LeaderboardRecord
	(*api.Notification)(nil),           // 32: nakama.api.Notification
	(*wrappers.StringValue)(nil),       // 33: google.protobuf.StringValue
	(*api.User)(nil),                   // 34: nakama.api.User
	(*wrappers.Int32Value)(nil),        // 35: google.protobuf.Int32Value
	(*empty.Empty)(nil),                // 36: google.protobuf.Empty
	(*api.ReadStorageObjectId)(nil),    // 37: nakama.api.ReadStorageObjectId
	(*api.FriendList)(nil),             // 38: nakama.api.FriendList
	(*api.UserGroupList)(nil),          // 39: nakama.api.UserGroupList
	(*api.StorageObjectAck)(nil),       // 40: nakama.api.StorageObjectAck
}
var file_console_proto_depIdxs = []int32{
	24, // 0: nakama.console.Account.account:type_name -> nakama.api.Account
	25, // 1: nakama.console.Account.disable_time:type_name -> google.protobuf.Timestamp
	26, // 2: nakama.console.AccountDeleteRequest.record_deletion:type_name -> google.protobuf.BoolValue
	24, // 3: nakama.console.AccountExport.account:type_name -> nakama.api.Account
	27, // 4: nakama.console.AccountExport.objects:type_name -> nakama.api.StorageObject
	28, // 5: nakama.console.AccountExport.friends:type_name -> nakama.api.Friend
	29, // 6: nakama.console.AccountExport.groups:type_name -> nakama.api.Group
	30, // 7: nakama.console.AccountExport.messages:type_name -> nakama.api.ChannelMessage
	31, // 8: nakama.console.AccountExport.leaderboard_records:type_name -> nakama.api.LeaderboardRecord
	32, // 9: nakama.console.AccountExport.notifications:type_name -> nakama.api.Notification
	18, // 10: nakama.console.AccountExport.wallet_ledgers:type_name -> nakama.console.WalletLedger
	21, // 11: nakama.console.Config.warnings:type_name -> nakama.console.Config.Warning
	27, // 12: nakama.console.StorageList.objects:type_name -> nakama.api.StorageObject
	33, // 13: nakama.console.UpdateAccountRequest.username:type_name -> google.protobuf.StringValue
	33, // 14: nakama.console.UpdateAccountRequest.display_name:type_name -> google.protobuf.StringValue
	33, // 15: nakama.console.UpdateAccountRequest.metadata:type_name -> google.protobuf.StringValue
	33, // 16: nakama.console.UpdateAccountRequest.avatar_url:type_name -> google.protobuf.StringValue
	33, // 17: nakama.console.UpdateAccountRequest.lang_tag:type_name -> google.protobuf.StringValue
	33, // 18: nakama.console.UpdateAccountRequest.location:type_name -> google.protobuf.StringValue
	33, // 19: nakama.console.UpdateAccountRequest.timezone:type_name -> google.protobuf.StringValue
	33, // 20: nakama.console.UpdateAccountRequest.custom_id:type_name -> google.protobuf.StringValue
	33, // 21: nakama.console.UpdateAccountRequest.email:type_name -> google.protobuf.StringValue
	33, // 22: nakama.console.UpdateAccountRequest.password:type_name -> google.protobuf.StringValue
	22, // 23: nakama.console.UpdateAccountRequest.device_ids:type_name -> nakama.console.UpdateAccountRequest.DeviceIdsEntry
	33, // 24: nakama.console.UpdateAccountRequest.wallet:type_name -> google.protobuf.StringValue
	34, // 25: nakama.console.UserList.users:type_name -> nakama.api.User
	23, // 26: nakama.console.StatusList.nodes:type_name -> nakama.console.StatusList.Status
	25, // 27: nakama.console.WalletLedger.create_time:type_name -> google.protobuf.Timestamp
	25, // 28: nakama.console.WalletLedger.update_time:type_name -> google.protobuf.Timestamp
	18, // 29: nakama.console.WalletLedgerList.items:type_name -> nakama.console.WalletLedger
	35, // 30: nakama.console.WriteStorageObjectRequest.permission_read:type_name -> google.protobuf.Int32Value
	35, // 31: nakama.console.WriteStorageObjectRequest.permission_write:type_name -> google.protobuf.Int32Value
	4,  // 32: nakama.console.Console.Authenticate:input_type -> nakama.console.AuthenticateRequest
	3,  // 33: nakama.console.Console.BanUser:input_type -> nakama.console.AccountId
	1,  // 34: nakama.console.Console.DeleteAccount:input_type -> nakama.console.AccountDeleteRequest
	7,  // 35: nakama.console.Console.DeleteFriend:input_type -> nakama.console.DeleteFriendRequest
	8,  // 36: nakama.console.Console.DeleteGroupUser:input_type -> nakama.console.DeleteGroupUserRequest
	36, // 37: nakama.console.Console.DeleteStorage:input_type -> google.protobuf.Empty
	9,  // 38: nakama.console.Console.DeleteStorageObject:input_type -> nakama.console.DeleteStorageObjectRequest
	36, // 39: nakama.console.Console.DeleteUsers:input_type -> google.protobuf.Empty
	10, // 40: nakama.console.Console.DeleteWalletLedger:input_type -> nakama.console.DeleteWalletLedgerRequest
	3,  // 41: nakama.console.Console.ExportAccount:input_type -> nakama.console.AccountId
	3,  // 42: nakama.console.Console.GetAccount:input_type -> nakama.console.AccountId
	36, // 43: nakama.console.Console.GetConfig:input_type -> google.protobuf.Empty
	3,  // 44: nakama.console.Console.GetFriends:input_type -> nakama.console.AccountId
	3,  // 45: nakama.console.Console.GetGroups:input_type -> nakama.console.AccountId
	36, // 46: nakama.console.Console.GetStatus:input_type -> google.protobuf.Empty
	37, // 47: nakama.console.Console.GetStorage:input_type -> nakama.api.ReadStorageObjectId
	3,  // 48: nakama.console.Console.GetWalletLedger:input_type -> nakama.console.AccountId
	11, // 49: nakama.console.Console.ListStorage:input_type -> nakama.console.ListStorageRequest
	12, // 50: nakama.console.Console.ListUsers:input_type -> nakama.console.ListUsersRequest
	3,  // 51: nakama.console.Console.UnbanUser:input_type -> nakama.console.AccountId
	3,  // 52: nakama.console.Console.UnlinkCustom:input_type -> nakama.console.AccountId
	14, // 53: nakama.console.Console.UnlinkDevice:input_type -> nakama.console.UnlinkDeviceRequest
	3,  // 54: nakama.console.Console.UnlinkEmail:input_type -> nakama.console.AccountId
	3,  // 55: nakama.console.Console.UnlinkApple:input_type -> nakama.console.AccountId
	3,  // 56: nakama.console.Console.UnlinkFacebook:input_type -> nakama.console.AccountId
	3,  // 57: nakama.console.Console.UnlinkFacebookInstantGame:input_type -> nakama.console.AccountId
	3,  // 58: nakama.console.Console.UnlinkGameCenter:input_type -> nakama.console.AccountId
	3,  // 59: nakama.console.Console.UnlinkGoogle:input_type -> nakama.console.AccountId
	3,  // 60: nakama.console.Console.UnlinkSteam:input_type -> nakama.console.AccountId
	15, // 61: nakama.console.Console.UpdateAccount:input_type -> nakama.console.UpdateAccountRequest
	20, // 62: nakama.console.Console.WriteStorageObject:input_type -> nakama.console.WriteStorageObjectRequest
	6,  // 63: nakama.console.Console.Authenticate:output_type -> nakama.console.ConsoleSession
	36, // 64: nakama.console.Console.BanUser:output_type -> google.protobuf.Empty
	36, // 65: nakama.console.Console.DeleteAccount:output_type -> google.protobuf.Empty
	36, // 66: nakama.console.Console.DeleteFriend:output_type -> google.protobuf.Empty
	36, // 67: nakama.console.Console.DeleteGroupUser:output_type -> google.protobuf.Empty
	36, // 68: nakama.console.Console.DeleteStorage:output_type -> google.protobuf.Empty
	36, // 69: nakama.console.Console.DeleteStorageObject:output_type -> google.protobuf.Empty
	36, // 70: nakama.console.Console.DeleteUsers:output_type -> google.protobuf.Empty
	36, // 71: nakama.console.Console.DeleteWalletLedger:output_type -> google.protobuf.Empty
	2,  // 72: nakama.console.Console.ExportAccount:output_type -> nakama.console.AccountExport
	0,  // 73: nakama.console.Console.GetAccount:output_type -> nakama.console.Account
	5,  // 74: nakama.console.Console.GetConfig:output_type -> nakama.console.Config
	38, // 75: nakama.console.Console.GetFriends:output_type -> nakama.api.FriendList
	39, // 76: nakama.console.Console.GetGroups:output_type -> nakama.api.UserGroupList
	17, // 77: nakama.console.Console.GetStatus:output_type -> nakama.console.StatusList
	27, // 78: nakama.console.Console.GetStorage:output_type -> nakama.api.StorageObject
	19, // 79: nakama.console.Console.GetWalletLedger:output_type -> nakama.console.WalletLedgerList
	13, // 80: nakama.console.Console.ListStorage:output_type -> nakama.console.StorageList
	16, // 81: nakama.console.Console.ListUsers:output_type -> nakama.console.UserList
	36, // 82: nakama.console.Console.UnbanUser:output_type -> google.protobuf.Empty
	36, // 83: nakama.console.Console.UnlinkCustom:output_type -> google.protobuf.Empty
	36, // 84: nakama.console.Console.UnlinkDevice:output_type -> google.protobuf.Empty
	36, // 85: nakama.console.Console.UnlinkEmail:output_type -> google.protobuf.Empty
	36, // 86: nakama.console.Console.UnlinkApple:output_type -> google.protobuf.Empty
	36, // 87: nakama.console.Console.UnlinkFacebook:output_type -> google.protobuf.Empty
	36, // 88: nakama.console.Console.UnlinkFacebookInstantGame:output_type -> google.protobuf.Empty
	36, // 89: nakama.console.Console.UnlinkGameCenter:output_type -> google.protobuf.Empty
	36, // 90: nakama.console.Console.UnlinkGoogle:output_type -> google.protobuf.Empty
	36, // 91: nakama.console.Console.UnlinkSteam:output_type -> google.protobuf.Empty
	36, // 92: nakama.console.Console.UpdateAccount:output_type -> google.protobuf.Empty
	40, // 93: nakama.console.Console.WriteStorageObject:output_type -> nakama.api.StorageObjectAck
	63, // [63:94] is the sub-list for method output_type
	32, // [32:63] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_console_proto_init() }
func file_console_proto_init() {
	if File_console_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_console_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountExport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsoleSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFriendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStorageObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWalletLedgerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlinkDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletLedger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletLedgerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteStorageObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Warning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_console_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusList_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_console_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_console_proto_goTypes,
		DependencyIndexes: file_console_proto_depIdxs,
		MessageInfos:      file_console_proto_msgTypes,
	}.Build()
	File_console_proto = out.File
	file_console_proto_rawDesc = nil
	file_console_proto_goTypes = nil
	file_console_proto_depIdxs = nil
=======
func init() {
	proto.RegisterType((*Account)(nil), "nakama.console.Account")
	proto.RegisterType((*AccountDeleteRequest)(nil), "nakama.console.AccountDeleteRequest")
	proto.RegisterType((*AccountExport)(nil), "nakama.console.AccountExport")
	proto.RegisterType((*AccountId)(nil), "nakama.console.AccountId")
	proto.RegisterType((*AuthenticateRequest)(nil), "nakama.console.AuthenticateRequest")
	proto.RegisterType((*Config)(nil), "nakama.console.Config")
	proto.RegisterType((*Config_Warning)(nil), "nakama.console.Config.Warning")
	proto.RegisterType((*ConsoleSession)(nil), "nakama.console.ConsoleSession")
	proto.RegisterType((*DeleteFriendRequest)(nil), "nakama.console.DeleteFriendRequest")
	proto.RegisterType((*DeleteGroupUserRequest)(nil), "nakama.console.DeleteGroupUserRequest")
	proto.RegisterType((*DeleteStorageObjectRequest)(nil), "nakama.console.DeleteStorageObjectRequest")
	proto.RegisterType((*DeleteWalletLedgerRequest)(nil), "nakama.console.DeleteWalletLedgerRequest")
	proto.RegisterType((*ListStorageRequest)(nil), "nakama.console.ListStorageRequest")
	proto.RegisterType((*ListUsersRequest)(nil), "nakama.console.ListUsersRequest")
	proto.RegisterType((*StorageList)(nil), "nakama.console.StorageList")
	proto.RegisterType((*UnlinkDeviceRequest)(nil), "nakama.console.UnlinkDeviceRequest")
	proto.RegisterType((*UpdateAccountRequest)(nil), "nakama.console.UpdateAccountRequest")
	proto.RegisterMapType((map[string]string)(nil), "nakama.console.UpdateAccountRequest.DeviceIdsEntry")
	proto.RegisterType((*UserList)(nil), "nakama.console.UserList")
	proto.RegisterType((*StatusList)(nil), "nakama.console.StatusList")
	proto.RegisterType((*StatusList_Status)(nil), "nakama.console.StatusList.Status")
	proto.RegisterType((*WalletLedger)(nil), "nakama.console.WalletLedger")
	proto.RegisterType((*WalletLedgerList)(nil), "nakama.console.WalletLedgerList")
	proto.RegisterType((*WriteStorageObjectRequest)(nil), "nakama.console.WriteStorageObjectRequest")
}

func init() { proto.RegisterFile("console.proto", fileDescriptor_2b2db7e2dd3bc0cc) }

var fileDescriptor_2b2db7e2dd3bc0cc = []byte{
	// 2465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x4b, 0x73, 0x1b, 0xc7,
	0x11, 0xf6, 0x82, 0xc4, 0xab, 0x41, 0x90, 0xcc, 0x88, 0x96, 0x41, 0x90, 0x96, 0xe0, 0x95, 0x4c,
	0x4b, 0xb0, 0x08, 0x48, 0x60, 0x1c, 0xc9, 0xb4, 0xf3, 0x20, 0x29, 0x89, 0x61, 0x2c, 0xc9, 0xa9,
	0xa5, 0x64, 0x55, 0x29, 0xa9, 0x42, 0x0d, 0x76, 0x87, 0x8b, 0x35, 0x17, 0x3b, 0xf0, 0xce, 0x00,
	0x0c, 0xc3, 0x62, 0x2a, 0x71, 0x72, 0x4b, 0x4e, 0xce, 0x2d, 0x67, 0x5f, 0x73, 0xcd, 0x21, 0x87,
	0xfc, 0x87, 0x54, 0x4e, 0xa9, 0xca, 0x31, 0x37, 0xff, 0x89, 0xd4, 0x3c, 0x16, 0x5c, 0x3c, 0x96,
	0x84, 0x98, 0xd2, 0x41, 0x25, 0xcc, 0xcc, 0x37, 0xfd, 0xf5, 0xf4, 0x76, 0xf7, 0x74, 0x0f, 0xa1,
	0x68, 0xd3, 0x80, 0x51, 0x9f, 0xd4, 0xba, 0x21, 0xe5, 0x14, 0xcd, 0x07, 0xf8, 0x10, 0x77, 0x70,
	0x4d, 0xcf, 0x96, 0xef, 0xb9, 0x1e, 0x6f, 0xf7, 0x5a, 0x35, 0x9b, 0x76, 0xea, 0x6d, 0x12, 0x52,
	0xcf, 0xf6, 0x71, 0x8b, 0xd5, 0x15, 0x6a, 0xdd, 0xa6, 0x9d, 0x0e, 0x0d, 0xea, 0xb8, 0xeb, 0x89,
	0x7f, 0x4a, 0x44, 0x79, 0xd5, 0xa5, 0xd4, 0xf5, 0x89, 0x9a, 0x0d, 0x02, 0xca, 0x31, 0xf7, 0x68,
	0xc0, 0xf4, 0xea, 0x8a, 0x5e, 0x95, 0xa3, 0x56, 0xef, 0xa0, 0x4e, 0x3a, 0x5d, 0x7e, 0xac, 0x17,
	0xaf, 0x8f, 0x2e, 0x72, 0xaf, 0x43, 0x18, 0xc7, 0x9d, 0xae, 0x06, 0x5c, 0x1b, 0x05, 0x1c, 0x85,
	0xb8, 0xdb, 0x25, 0x61, 0x24, 0xfd, 0x8e, 0xfc, 0xcf, 0x5e, 0x77, 0x49, 0xb0, 0xce, 0x8e, 0xb0,
	0xeb, 0x92, 0xb0, 0x4e, 0xbb, 0x92, 0x7f, 0x5c, 0x17, 0xf3, 0x08, 0xb2, 0x5b, 0xb6, 0x4d, 0x7b,
	0x01, 0x47, 0xeb, 0x90, 0xc5, 0xea, 0x67, 0xc9, 0xa8, 0x18, 0xb7, 0x0a, 0x8d, 0x2b, 0x35, 0x6d,
	0x09, 0x71, 0x30, 0x8d, 0xb2, 0x22, 0x0c, 0xfa, 0x21, 0xcc, 0x39, 0x1e, 0xc3, 0x2d, 0x9f, 0x34,
	0x85, 0x8a, 0xa5, 0x94, 0xdc, 0x53, 0xae, 0x29, 0xf5, 0x6a, 0x91, 0x7a, 0xb5, 0xe7, 0x91, 0xfe,
	0x56, 0x41, 0xe3, 0xc5, 0x8c, 0x79, 0x08, 0x4b, 0x5a, 0xe4, 0x43, 0xe2, 0x13, 0x4e, 0x2c, 0xf2,
	0x55, 0x8f, 0x30, 0x8e, 0xe6, 0x21, 0xe5, 0x39, 0x52, 0x81, 0xbc, 0x95, 0xf2, 0x1c, 0xb4, 0x03,
	0x0b, 0x21, 0xb1, 0x69, 0xe8, 0x34, 0x1d, 0x81, 0xf3, 0x68, 0x90, 0xc8, 0xb4, 0x4d, 0xa9, 0xff,
	0x05, 0xf6, 0x7b, 0xc4, 0x9a, 0x57, 0x5b, 0x1e, 0xea, 0x1d, 0xe6, 0xbf, 0x67, 0xa0, 0xa8, 0xd9,
	0x1e, 0xfd, 0xaa, 0x4b, 0xc3, 0xd7, 0x3e, 0xec, 0x06, 0x64, 0x69, 0xeb, 0x4b, 0x62, 0x73, 0x56,
	0x4a, 0x55, 0x66, 0x6e, 0x15, 0x1a, 0xcb, 0x71, 0xf8, 0x3e, 0xa7, 0x21, 0x76, 0xc9, 0xe7, 0x12,
	0x61, 0x45, 0x48, 0x74, 0x07, 0xb2, 0x07, 0xa1, 0x47, 0x02, 0x87, 0x95, 0x66, 0xe4, 0x26, 0x14,
	0xdf, 0xf4, 0x58, 0x2e, 0x59, 0x11, 0x04, 0xdd, 0x86, 0x8c, 0x1b, 0xd2, 0x5e, 0x97, 0x95, 0x66,
	0x25, 0xf8, 0x7b, 0x71, 0xf0, 0xae, 0x58, 0xb1, 0x34, 0x00, 0xfd, 0x00, 0x72, 0x1d, 0xc2, 0x18,
	0x76, 0x09, 0x2b, 0xa5, 0x25, 0xb8, 0x1c, 0x07, 0xef, 0xb4, 0x71, 0x10, 0x10, 0xff, 0xa9, 0x82,
	0x58, 0x03, 0x2c, 0x7a, 0x06, 0x57, 0x7c, 0x82, 0x1d, 0x12, 0xb6, 0x28, 0x0e, 0x9d, 0xa6, 0x32,
	0x12, 0x2b, 0x65, 0xa4, 0x88, 0x77, 0xe3, 0x22, 0x9e, 0x9c, 0xc1, 0x2c, 0x89, 0xb2, 0x90, 0x3f,
	0x3a, 0xc5, 0xd0, 0x8f, 0xa0, 0x18, 0x50, 0xee, 0x1d, 0x78, 0xb6, 0xf2, 0xa9, 0x52, 0x56, 0x4a,
	0x2a, 0xc5, 0x25, 0x3d, 0x8b, 0x01, 0xac, 0x61, 0x38, 0xda, 0x81, 0xf9, 0x23, 0xec, 0xfb, 0x84,
	0x37, 0x7d, 0xe2, 0xb8, 0x24, 0x64, 0xa5, 0x9c, 0x14, 0xb0, 0x5a, 0x1b, 0x0e, 0xc1, 0xda, 0x4b,
	0x89, 0x7a, 0x22, 0x41, 0x56, 0xf1, 0x28, 0x36, 0x62, 0xe6, 0x0a, 0xe4, 0xf5, 0xe7, 0xda, 0x73,
	0x46, 0xbd, 0xc7, 0x7c, 0x0a, 0x57, 0xb6, 0x7a, 0xbc, 0x4d, 0x02, 0x2e, 0x48, 0x07, 0x4e, 0x56,
	0x86, 0x5c, 0x8f, 0x91, 0x30, 0xc0, 0x1d, 0xa2, 0xc1, 0x83, 0xb1, 0x58, 0xeb, 0x62, 0xc6, 0x8e,
	0x68, 0xe8, 0x48, 0x4f, 0xcb, 0x5b, 0x83, 0xb1, 0xf9, 0x0f, 0x03, 0x32, 0x3b, 0x34, 0x38, 0xf0,
	0x5c, 0x74, 0x15, 0x32, 0xb6, 0xfc, 0xa5, 0x05, 0xe8, 0x11, 0xda, 0x84, 0xdc, 0x11, 0x0e, 0x03,
	0x2f, 0x70, 0x23, 0x57, 0xb9, 0x36, 0x7a, 0x1a, 0x25, 0xa1, 0xf6, 0x52, 0xc1, 0xac, 0x01, 0x1e,
	0xbd, 0x0f, 0xf3, 0x8c, 0x84, 0x7d, 0x12, 0x36, 0xfb, 0x24, 0x64, 0xc2, 0xd5, 0x67, 0xa4, 0xec,
	0xa2, 0x9a, 0xfd, 0x42, 0x4d, 0x96, 0x3f, 0x86, 0xac, 0xde, 0x8b, 0x96, 0x20, 0x7d, 0xe0, 0x11,
	0x3f, 0x3a, 0xb2, 0x1a, 0xa0, 0x12, 0x64, 0xf5, 0x37, 0xd7, 0x27, 0x88, 0x86, 0xe6, 0x1a, 0xcc,
	0xef, 0x28, 0x2d, 0xf6, 0x09, 0x13, 0xc2, 0x84, 0x04, 0x4e, 0x0f, 0x49, 0x10, 0x49, 0x90, 0x03,
	0x73, 0x1b, 0xae, 0xa8, 0xb0, 0xd4, 0x5e, 0x9a, 0x10, 0x9c, 0x2b, 0x90, 0x57, 0xee, 0xdb, 0xf4,
	0x06, 0xc6, 0x52, 0x13, 0x7b, 0x8e, 0xb9, 0x03, 0x57, 0x95, 0x0c, 0xe9, 0xbc, 0x2f, 0x18, 0x09,
	0x93, 0xc4, 0x2c, 0x43, 0x4e, 0x7a, 0xf6, 0x99, 0x94, 0xac, 0x1c, 0xef, 0x39, 0xe6, 0xef, 0x0c,
	0x28, 0x2b, 0x29, 0xc3, 0x41, 0xa6, 0x25, 0x5d, 0x03, 0xb0, 0xa9, 0xef, 0x13, 0x5b, 0x26, 0x06,
	0x25, 0x31, 0x36, 0x83, 0x16, 0x61, 0xe6, 0x90, 0x1c, 0x6b, 0xa1, 0xe2, 0x27, 0x7a, 0x07, 0xb2,
	0xe2, 0x53, 0x0b, 0x2a, 0x65, 0xdc, 0x8c, 0x18, 0xee, 0x49, 0xa3, 0x45, 0x56, 0x9f, 0x55, 0x3a,
	0xe8, 0xa1, 0xf9, 0x53, 0x58, 0x56, 0x2a, 0x0c, 0xb9, 0x61, 0xb2, 0x49, 0xb4, 0x4f, 0x9f, 0x99,
	0x44, 0x4d, 0xec, 0x39, 0xe6, 0x3a, 0xa0, 0x27, 0x1e, 0xe3, 0xfa, 0x28, 0x91, 0x88, 0x98, 0x4a,
	0x46, 0x5c, 0x25, 0xb3, 0x05, 0x8b, 0x02, 0x2e, 0x4c, 0xc7, 0x22, 0xf0, 0x55, 0xc8, 0x1c, 0x78,
	0x3e, 0x27, 0x61, 0x84, 0x55, 0x23, 0x31, 0xdf, 0x12, 0x61, 0xaf, 0x48, 0x73, 0x96, 0x1e, 0x09,
	0x0b, 0x71, 0xda, 0x69, 0x31, 0x4e, 0x03, 0xc2, 0xe4, 0x91, 0x73, 0x56, 0x6c, 0xc6, 0xb4, 0xa1,
	0xa0, 0xd5, 0x11, 0x54, 0xf1, 0x44, 0x67, 0x4c, 0x9d, 0xe8, 0xae, 0x43, 0x81, 0x53, 0x8e, 0xfd,
	0xa6, 0x4a, 0xa8, 0x42, 0x81, 0xb4, 0x20, 0xe1, 0xd8, 0xdf, 0x11, 0x33, 0xc2, 0x9d, 0x5e, 0x04,
	0xbe, 0x17, 0x1c, 0x3e, 0x24, 0x7d, 0xcf, 0x26, 0xe7, 0xd8, 0xce, 0x91, 0x80, 0x98, 0xed, 0xd4,
	0xc4, 0x9e, 0x63, 0xfe, 0x2d, 0x03, 0x4b, 0x2f, 0xba, 0x0e, 0xe6, 0x24, 0xca, 0xce, 0x09, 0x52,
	0x1e, 0xc4, 0x82, 0x5b, 0x5d, 0x15, 0xab, 0x63, 0x57, 0xc5, 0x3e, 0x0f, 0xbd, 0xc0, 0x55, 0x97,
	0xc5, 0x59, 0xe8, 0xff, 0x58, 0x5e, 0x69, 0x5d, 0x1f, 0x1f, 0x37, 0xe5, 0xee, 0x99, 0x29, 0x76,
	0x17, 0xf4, 0x8e, 0x67, 0x42, 0xc0, 0x03, 0x91, 0x98, 0x39, 0x76, 0x30, 0xc7, 0xd2, 0x89, 0x2e,
	0xa4, 0x8e, 0xd0, 0xe8, 0x13, 0x00, 0xdc, 0xc7, 0x1c, 0x87, 0xcd, 0x5e, 0xe8, 0x97, 0xd2, 0x53,
	0xec, 0xcd, 0x2b, 0xfc, 0x8b, 0xd0, 0x47, 0xf7, 0x21, 0xe7, 0xe3, 0xc0, 0x6d, 0x72, 0xec, 0x96,
	0x32, 0x53, 0x6c, 0xcd, 0x0a, 0xf4, 0x73, 0xec, 0x0a, 0x7d, 0x7d, 0xaa, 0xb2, 0x71, 0x29, 0x3b,
	0x8d, 0xbe, 0x11, 0x5a, 0xec, 0x14, 0xb7, 0xfe, 0xaf, 0x69, 0x40, 0x4a, 0xb9, 0x69, 0x76, 0x46,
	0x68, 0xf4, 0x31, 0xe4, 0xed, 0x1e, 0xe3, 0xb4, 0x23, 0x3e, 0x72, 0x7e, 0x9a, 0xad, 0x0a, 0xbe,
	0xe7, 0xa0, 0x06, 0xa4, 0x49, 0x07, 0x7b, 0x7e, 0x09, 0xa6, 0xd8, 0xa6, 0xa0, 0x42, 0xd1, 0x41,
	0x3a, 0x2f, 0x4c, 0xc3, 0x16, 0xa1, 0x91, 0x05, 0x30, 0xf0, 0x46, 0x56, 0x9a, 0x93, 0xd1, 0xb0,
	0x31, 0x9a, 0xcb, 0x27, 0x79, 0x64, 0xed, 0xa1, 0xf6, 0x59, 0xf6, 0x28, 0xe0, 0xe1, 0xb1, 0x95,
	0x8f, 0x7c, 0x98, 0xa1, 0xef, 0x43, 0x46, 0x25, 0x83, 0x52, 0x71, 0x0a, 0x5d, 0x34, 0xb6, 0xfc,
	0x29, 0xcc, 0x0f, 0x8b, 0x8c, 0xf2, 0x9a, 0x71, 0x96, 0xd7, 0x96, 0x20, 0xdd, 0x17, 0x9b, 0x74,
	0xdc, 0xa8, 0xc1, 0x66, 0xea, 0x81, 0x61, 0xee, 0x43, 0x4e, 0x64, 0x10, 0x19, 0xde, 0x6b, 0x90,
	0x16, 0xde, 0x1e, 0x05, 0xf7, 0x62, 0x3c, 0xb8, 0x65, 0x86, 0x56, 0xcb, 0x17, 0x47, 0xf4, 0xb7,
	0x33, 0x00, 0xfb, 0x1c, 0xf3, 0x1e, 0x93, 0x72, 0xef, 0x43, 0x3a, 0xa0, 0x0e, 0x89, 0xe4, 0xbe,
	0x37, 0x6a, 0xa6, 0x33, 0xa8, 0xfe, 0x69, 0x29, 0x7c, 0xf9, 0x3f, 0x29, 0xc8, 0xa8, 0x19, 0x84,
	0x60, 0x36, 0x76, 0x21, 0xcb, 0xdf, 0x22, 0xab, 0xb5, 0x09, 0xf6, 0x79, 0x5b, 0xab, 0xa0, 0x47,
	0xe8, 0x06, 0x14, 0x99, 0xba, 0xc0, 0xb4, 0x86, 0x33, 0x72, 0x79, 0x4e, 0x4f, 0x4a, 0x1d, 0xc5,
	0x75, 0xda, 0x0d, 0x09, 0x23, 0x81, 0x4d, 0x34, 0x6a, 0x56, 0xa2, 0x8a, 0xd1, 0xac, 0x82, 0x5d,
	0x87, 0x42, 0x07, 0x73, 0xbb, 0xad, 0x31, 0x69, 0x75, 0x56, 0x39, 0xa5, 0x00, 0x1f, 0xc0, 0x82,
	0x4b, 0x43, 0xda, 0xe3, 0x5e, 0x10, 0x09, 0xca, 0x48, 0xd0, 0xfc, 0x60, 0x5a, 0x01, 0x6f, 0xc2,
	0x3c, 0xee, 0xbb, 0x4d, 0x1f, 0x73, 0x12, 0xd8, 0xc7, 0xcd, 0x0e, 0x93, 0x41, 0x65, 0x58, 0x73,
	0xb8, 0xef, 0x3e, 0x51, 0x93, 0x4f, 0x19, 0xaa, 0x80, 0x18, 0x37, 0x43, 0xcc, 0x49, 0x93, 0x11,
	0x5b, 0x86, 0x8f, 0x61, 0x01, 0xee, 0xbb, 0x16, 0xe6, 0x64, 0x9f, 0xd8, 0xc8, 0x84, 0xa2, 0x40,
	0x78, 0x41, 0xb7, 0xc7, 0x9b, 0x87, 0x2d, 0x26, 0xc3, 0xc4, 0xb0, 0x0a, 0xb8, 0xef, 0xee, 0x89,
	0xb9, 0xcf, 0x5a, 0x2c, 0xe2, 0xa2, 0x3d, 0x1e, 0x81, 0x60, 0xc0, 0xf5, 0xb9, 0x9c, 0xfc, 0xac,
	0xc5, 0xcc, 0xef, 0x0c, 0x98, 0x8b, 0xdf, 0x5a, 0x63, 0xc9, 0x32, 0x76, 0xf7, 0xa4, 0x86, 0xae,
	0xc3, 0x55, 0xc8, 0xdb, 0x6d, 0x1c, 0xb8, 0x84, 0x11, 0xae, 0x6f, 0xca, 0xb3, 0x09, 0x51, 0x24,
	0x0d, 0x25, 0xba, 0xfc, 0x50, 0x2a, 0x2b, 0xd8, 0x21, 0x11, 0xa7, 0x93, 0x7d, 0x41, 0xfa, 0xc2,
	0xbe, 0x00, 0x14, 0x5c, 0x4c, 0x88, 0xcd, 0x3d, 0x19, 0x52, 0x6a, 0x73, 0xe6, 0xe2, 0xcd, 0x0a,
	0x2e, 0x7b, 0x8a, 0xc7, 0xb0, 0x18, 0x3f, 0xac, 0xf4, 0xcc, 0x06, 0xa4, 0x3d, 0x4e, 0x3a, 0x91,
	0x67, 0x9e, 0x5f, 0x5a, 0x2a, 0xa8, 0xf9, 0x6d, 0x0a, 0x96, 0x5f, 0x86, 0xde, 0x9b, 0xaf, 0x39,
	0x06, 0x41, 0x3b, 0x1b, 0x0b, 0xda, 0x78, 0x25, 0x92, 0x1e, 0xaa, 0x44, 0xd0, 0x43, 0x58, 0xe8,
	0x92, 0xb0, 0xe3, 0x29, 0xcf, 0x0f, 0x09, 0x76, 0xb4, 0x85, 0x56, 0xc6, 0x2c, 0xb4, 0x17, 0xf0,
	0x8d, 0x86, 0xee, 0x86, 0xce, 0xf6, 0x58, 0x04, 0x3b, 0xe8, 0x31, 0x2c, 0xc6, 0xa4, 0x1c, 0x89,
	0x83, 0xea, 0xec, 0x7f, 0xae, 0x98, 0x18, 0xb5, 0x34, 0x4e, 0xe3, 0xbb, 0x55, 0xc8, 0xea, 0x6a,
	0x12, 0xfd, 0xde, 0x80, 0xb9, 0x78, 0xa5, 0x8d, 0x6e, 0x8c, 0x1a, 0x7a, 0x42, 0x1d, 0x5e, 0x9e,
	0x54, 0x1a, 0xc7, 0x8a, 0x53, 0xb3, 0xf6, 0xcd, 0x56, 0xae, 0x95, 0x81, 0x59, 0x78, 0x0b, 0xbd,
	0xf5, 0xf5, 0xbf, 0xfe, 0xfb, 0xe7, 0xd4, 0xbb, 0x66, 0xa9, 0xde, 0x6f, 0xd4, 0x35, 0xbc, 0x8e,
	0x63, 0x32, 0x37, 0x8d, 0x2a, 0x6a, 0x41, 0x76, 0x1b, 0x07, 0x22, 0x91, 0xa1, 0xe5, 0x31, 0xfe,
	0xa8, 0x49, 0x28, 0x5f, 0x1d, 0x3b, 0xe5, 0x23, 0xd1, 0x80, 0x9b, 0x37, 0x25, 0xc5, 0x35, 0x73,
	0x75, 0x88, 0x42, 0x6d, 0xab, 0x9f, 0x78, 0xce, 0x69, 0xbd, 0x85, 0x03, 0x44, 0xa1, 0xa8, 0xaa,
	0xc1, 0xa8, 0x6f, 0xbe, 0x99, 0xc0, 0x34, 0xd4, 0xd7, 0x26, 0x92, 0x56, 0x24, 0x69, 0xb9, 0x5a,
	0x4a, 0x22, 0x45, 0xbf, 0x35, 0x60, 0x2e, 0x5e, 0x8c, 0x8f, 0x9b, 0x76, 0x42, 0xa9, 0x9e, 0xc8,
	0xb7, 0x21, 0xf9, 0xd6, 0xab, 0x1f, 0x26, 0x1e, 0x52, 0x15, 0xf0, 0xf5, 0x93, 0x41, 0x65, 0x7f,
	0x8a, 0xfe, 0x60, 0xc0, 0xc2, 0x48, 0x2d, 0x8f, 0xd6, 0x26, 0x6b, 0x31, 0x5a, 0xec, 0x27, 0x2a,
	0x72, 0x4f, 0x2a, 0xf2, 0x61, 0xf5, 0x76, 0xa2, 0x22, 0xb2, 0x07, 0xa8, 0x9f, 0x44, 0xad, 0xc1,
	0x29, 0xfa, 0x65, 0x64, 0x7a, 0x1d, 0x97, 0x28, 0x41, 0x76, 0x22, 0xe7, 0x8a, 0xe4, 0x7c, 0xbb,
	0x7a, 0x25, 0xce, 0xc9, 0xb4, 0xb0, 0x7f, 0x1a, 0x51, 0xd3, 0x33, 0x14, 0xf6, 0xa8, 0x3a, 0xf9,
	0xa0, 0x93, 0x72, 0x43, 0x22, 0x71, 0x5f, 0x12, 0x77, 0xab, 0x77, 0x27, 0x10, 0xd7, 0x4f, 0xce,
	0x92, 0xc7, 0x69, 0xfd, 0xe4, 0x90, 0x1c, 0x9f, 0xd6, 0x4f, 0x74, 0xbe, 0x38, 0x7d, 0xf5, 0x69,
	0x75, 0xf3, 0x75, 0xf7, 0xd4, 0x4f, 0x74, 0xbe, 0x38, 0x45, 0x2f, 0xa1, 0xa0, 0xb4, 0x95, 0x3d,
	0xc4, 0x6b, 0xdb, 0xab, 0x24, 0xd5, 0x46, 0xd5, 0xc5, 0xb8, 0x0a, 0x82, 0x06, 0xfd, 0xc9, 0x00,
	0x34, 0xde, 0x14, 0xa1, 0xdb, 0x93, 0x6d, 0x35, 0xa1, 0x71, 0xfa, 0x3f, 0x1c, 0x54, 0x55, 0x45,
	0xf5, 0x93, 0x41, 0x9f, 0x75, 0x8a, 0x42, 0x28, 0xaa, 0x87, 0x9d, 0x28, 0x28, 0xcf, 0x09, 0xff,
	0x77, 0x13, 0x96, 0x94, 0x00, 0xf3, 0x03, 0xc9, 0xff, 0x1e, 0xba, 0x9e, 0xc8, 0x4f, 0xd4, 0x13,
	0x52, 0x0b, 0x60, 0x97, 0x4c, 0x43, 0xf8, 0x4e, 0xc2, 0x52, 0x14, 0xfb, 0x28, 0x39, 0xf6, 0x5f,
	0x42, 0x7e, 0x97, 0xf0, 0xe8, 0xc9, 0x21, 0xf1, 0xeb, 0x4d, 0x7c, 0x60, 0x30, 0xcb, 0x52, 0xfc,
	0x12, 0x42, 0x71, 0xf1, 0xfa, 0x99, 0xa2, 0x2d, 0x95, 0x7f, 0xac, 0xdf, 0x9e, 0xce, 0x4d, 0x96,
	0x63, 0x6f, 0x56, 0xe2, 0x5e, 0x9d, 0xc2, 0x4c, 0x2a, 0x7f, 0x20, 0x4f, 0x1e, 0x61, 0x57, 0xbd,
	0x5c, 0x9d, 0x43, 0xb4, 0x3c, 0x5a, 0x8b, 0xca, 0x2d, 0x92, 0x6b, 0x4d, 0x72, 0x55, 0xd0, 0xb5,
	0xf3, 0x53, 0x05, 0xfa, 0x85, 0xa4, 0xd2, 0xe5, 0x64, 0x92, 0xb5, 0xca, 0xc9, 0xb5, 0xe9, 0x64,
	0x8b, 0x31, 0x25, 0xef, 0x6b, 0x43, 0x9a, 0x2c, 0x4a, 0x3d, 0xd7, 0xe3, 0xea, 0x8a, 0x6b, 0x75,
	0x28, 0x1f, 0x8c, 0x9e, 0x67, 0x68, 0xd1, 0x7c, 0x20, 0x69, 0x1a, 0xe8, 0xb5, 0xb3, 0x01, 0x3a,
	0x82, 0x85, 0x5d, 0xc2, 0x87, 0x42, 0xee, 0x1c, 0x93, 0x56, 0xce, 0x2b, 0x76, 0xa6, 0xfc, 0x8a,
	0x2a, 0xc8, 0xd0, 0x21, 0x14, 0x62, 0x2f, 0x17, 0xc8, 0x1c, 0x95, 0x3c, 0xfe, 0xac, 0x51, 0x5e,
	0x19, 0x37, 0xf4, 0xe0, 0x9d, 0x21, 0xca, 0xc4, 0x68, 0x62, 0x26, 0xc6, 0x90, 0x1f, 0xbc, 0x7b,
	0xa0, 0xca, 0x24, 0xaa, 0xf8, 0x93, 0x48, 0xb9, 0x34, 0xd6, 0x94, 0xe9, 0x76, 0x27, 0xca, 0x5f,
	0x68, 0x3c, 0x7f, 0x1d, 0x40, 0xfe, 0x45, 0xd0, 0xba, 0x7c, 0xad, 0xa0, 0x5d, 0xd2, 0x4c, 0x76,
	0xc9, 0x9e, 0x10, 0x8f, 0xbe, 0x82, 0x39, 0xf5, 0xf2, 0xb1, 0x23, 0x9b, 0xd8, 0xcb, 0x50, 0xd5,
	0x24, 0xd5, 0x2d, 0x73, 0xed, 0x1c, 0x2a, 0xc1, 0x50, 0x57, 0x7d, 0x32, 0xfa, 0x4d, 0x44, 0xa9,
	0x7a, 0xc6, 0xf1, 0x72, 0x61, 0xc2, 0x53, 0xcc, 0x45, 0xb7, 0xf4, 0xc5, 0xe4, 0xaa, 0xc7, 0x15,
	0x45, 0x18, 0x85, 0x82, 0x62, 0x78, 0x24, 0x1b, 0xf0, 0x4b, 0x9c, 0x78, 0x5d, 0x92, 0x7e, 0x60,
	0xbe, 0x7f, 0x11, 0xa9, 0x6a, 0xf1, 0x07, 0x84, 0x5b, 0xdd, 0xae, 0x4f, 0xde, 0x28, 0x21, 0x96,
	0x0c, 0x3d, 0x98, 0x57, 0x84, 0x8f, 0xb1, 0x4d, 0x5a, 0x94, 0x1e, 0x5e, 0x86, 0xf3, 0xae, 0xe4,
	0xac, 0x9a, 0xb7, 0x2e, 0xe2, 0x3c, 0x88, 0x48, 0xfe, 0x68, 0xc0, 0xf2, 0x30, 0xef, 0x5e, 0xc0,
	0x38, 0x0e, 0xf8, 0xae, 0x68, 0x95, 0x2f, 0xa1, 0xc2, 0x27, 0x52, 0x85, 0x8f, 0xcc, 0x8d, 0x69,
	0x55, 0xf0, 0x14, 0x9f, 0x2b, 0xf8, 0x8e, 0x61, 0x51, 0x29, 0x23, 0xd8, 0x77, 0x48, 0xc0, 0x2f,
	0x17, 0x48, 0x0d, 0xa9, 0xc3, 0x1d, 0xb3, 0x7a, 0x91, 0x0e, 0x82, 0xd4, 0x56, 0x34, 0x83, 0xa0,
	0xda, 0x95, 0x22, 0xdf, 0x68, 0x50, 0xa9, 0xed, 0x67, 0x3e, 0xb6, 0xcf, 0x09, 0xee, 0xbc, 0x51,
	0x1f, 0x63, 0x92, 0x21, 0x84, 0xe2, 0xd0, 0xdb, 0xd2, 0x78, 0x9b, 0x31, 0xe9, 0xe9, 0x29, 0x91,
	0xfd, 0xc6, 0xc4, 0xf6, 0x29, 0xc6, 0x2e, 0x22, 0xf7, 0x2f, 0x06, 0xa0, 0xf1, 0xbe, 0x77, 0xbc,
	0xa8, 0x4b, 0xec, 0x8d, 0xcb, 0xab, 0x89, 0x97, 0xde, 0x96, 0x7d, 0x18, 0xf9, 0x5b, 0xf9, 0xb5,
	0xef, 0xbd, 0x4d, 0xa3, 0xba, 0xfd, 0xf7, 0xd4, 0x37, 0x5b, 0x7f, 0x4d, 0xa1, 0x53, 0x78, 0xfb,
	0x99, 0xa4, 0xa8, 0x68, 0x01, 0x95, 0xad, 0x9f, 0xef, 0x55, 0xfa, 0x0d, 0xb3, 0x09, 0xef, 0x3d,
	0x6f, 0x93, 0x8a, 0x5e, 0x14, 0xdd, 0x26, 0x0d, 0x59, 0x65, 0xad, 0xb2, 0x43, 0x03, 0x1e, 0x7a,
	0xad, 0x1e, 0xa7, 0x21, 0x43, 0x37, 0xdb, 0x9c, 0x77, 0xd9, 0x66, 0xbd, 0x7e, 0xde, 0xdf, 0x74,
	0xcb, 0x4b, 0x6d, 0xe2, 0xfb, 0xf4, 0x27, 0x67, 0x0b, 0x02, 0xd7, 0x98, 0x69, 0xd4, 0xee, 0x96,
	0xe7, 0xef, 0x35, 0xee, 0xd7, 0xee, 0xd6, 0xee, 0xd6, 0xee, 0x6d, 0xde, 0xdf, 0xf8, 0xe8, 0x5e,
	0xd5, 0x30, 0x1a, 0x8b, 0x22, 0x29, 0xe8, 0xbf, 0x69, 0xd5, 0xbf, 0x64, 0x34, 0xd8, 0x1c, 0x9b,
	0x79, 0x55, 0x81, 0x05, 0xc8, 0x6f, 0x63, 0xe6, 0xd9, 0x42, 0x31, 0x94, 0xca, 0x19, 0x50, 0x84,
	0xfc, 0x36, 0xc1, 0x21, 0x09, 0x7f, 0x76, 0xc4, 0xd1, 0x5b, 0xad, 0x85, 0x91, 0x89, 0x70, 0x1b,
	0x6e, 0xe8, 0xb3, 0xa8, 0xbf, 0xfe, 0x0c, 0xce, 0xeb, 0x50, 0xbb, 0xd7, 0x21, 0x81, 0xfa, 0x3b,
	0x2e, 0x5a, 0x89, 0x4e, 0x34, 0xac, 0x6d, 0xdd, 0xa1, 0x36, 0x7b, 0x95, 0xd5, 0x7b, 0x5a, 0x19,
	0xe9, 0x0e, 0x1b, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x57, 0x22, 0x71, 0xeb, 0x1e, 0x00,
	0x00,
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsoleClient is the client API for Console service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsoleClient interface {
	// Authenticate a console user with username and password.
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*ConsoleSession, error)
	// Ban a user.
	BanUser(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete all information stored for a user account.
	DeleteAccount(ctx context.Context, in *AccountDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete the friend relationship between two users.
	DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Remove a user from a group.
	DeleteGroupUser(ctx context.Context, in *DeleteGroupUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete all storage data.
	DeleteStorage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete a storage object.
	DeleteStorageObject(ctx context.Context, in *DeleteStorageObjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete (non-recorded) all user accounts.
	DeleteUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete a wallet ledger item.
	DeleteWalletLedger(ctx context.Context, in *DeleteWalletLedgerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Export all information stored about a user account.
	ExportAccount(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*AccountExport, error)
	// Get detailed account information for a single user.
	GetAccount(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*Account, error)
	// Get server config and configuration warnings.
	GetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config, error)
	// Get a user's list of friend relationships.
	GetFriends(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*api.FriendList, error)
	// Get a list of groups the user is a member of.
	GetGroups(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*api.UserGroupList, error)
	// Get current status data for all nodes.
	GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusList, error)
	// Get a storage object.
	GetStorage(ctx context.Context, in *api.ReadStorageObjectId, opts ...grpc.CallOption) (*api.StorageObject, error)
	// Get a list of the user's wallet transactions.
	GetWalletLedger(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*WalletLedgerList, error)
	// List (and optionally filter) storage data.
	ListStorage(ctx context.Context, in *ListStorageRequest, opts ...grpc.CallOption) (*StorageList, error)
	// List (and optionally filter) users.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*UserList, error)
	// Unban a user.
	UnbanUser(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the custom ID from a user account.
	UnlinkCustom(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the device ID from a user account.
	UnlinkDevice(ctx context.Context, in *UnlinkDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the email from a user account.
	UnlinkEmail(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the Apple ID from a user account.
	UnlinkApple(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the Facebook ID from a user account.
	UnlinkFacebook(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the Facebook Instant Game ID from a user account.
	UnlinkFacebookInstantGame(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the Game Center ID from a user account.
	UnlinkGameCenter(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the Google ID from a user account.
	UnlinkGoogle(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the Steam ID from a user account.
	UnlinkSteam(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Update one or more fields on a user account.
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Write a new storage object or replace an existing one.
	WriteStorageObject(ctx context.Context, in *WriteStorageObjectRequest, opts ...grpc.CallOption) (*api.StorageObjectAck, error)
}

type consoleClient struct {
	cc *grpc.ClientConn
}

func NewConsoleClient(cc *grpc.ClientConn) ConsoleClient {
	return &consoleClient{cc}
}

func (c *consoleClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*ConsoleSession, error) {
	out := new(ConsoleSession)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) BanUser(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/BanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteAccount(ctx context.Context, in *AccountDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteGroupUser(ctx context.Context, in *DeleteGroupUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteGroupUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteStorage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteStorageObject(ctx context.Context, in *DeleteStorageObjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteStorageObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteWalletLedger(ctx context.Context, in *DeleteWalletLedgerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteWalletLedger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) ExportAccount(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*AccountExport, error) {
	out := new(AccountExport)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/ExportAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetAccount(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetFriends(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*api.FriendList, error) {
	out := new(api.FriendList)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetGroups(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*api.UserGroupList, error) {
	out := new(api.UserGroupList)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusList, error) {
	out := new(StatusList)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetStorage(ctx context.Context, in *api.ReadStorageObjectId, opts ...grpc.CallOption) (*api.StorageObject, error) {
	out := new(api.StorageObject)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetWalletLedger(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*WalletLedgerList, error) {
	out := new(WalletLedgerList)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetWalletLedger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) ListStorage(ctx context.Context, in *ListStorageRequest, opts ...grpc.CallOption) (*StorageList, error) {
	out := new(StorageList)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/ListStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnbanUser(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnbanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkCustom(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkCustom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkDevice(ctx context.Context, in *UnlinkDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkEmail(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkApple(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkApple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkFacebook(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkFacebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkFacebookInstantGame(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkFacebookInstantGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkGameCenter(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkGameCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkGoogle(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkGoogle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkSteam(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkSteam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) WriteStorageObject(ctx context.Context, in *WriteStorageObjectRequest, opts ...grpc.CallOption) (*api.StorageObjectAck, error) {
	out := new(api.StorageObjectAck)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/WriteStorageObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsoleServer is the server API for Console service.
type ConsoleServer interface {
	// Authenticate a console user with username and password.
	Authenticate(context.Context, *AuthenticateRequest) (*ConsoleSession, error)
	// Ban a user.
	BanUser(context.Context, *AccountId) (*empty.Empty, error)
	// Delete all information stored for a user account.
	DeleteAccount(context.Context, *AccountDeleteRequest) (*empty.Empty, error)
	// Delete the friend relationship between two users.
	DeleteFriend(context.Context, *DeleteFriendRequest) (*empty.Empty, error)
	// Remove a user from a group.
	DeleteGroupUser(context.Context, *DeleteGroupUserRequest) (*empty.Empty, error)
	// Delete all storage data.
	DeleteStorage(context.Context, *empty.Empty) (*empty.Empty, error)
	// Delete a storage object.
	DeleteStorageObject(context.Context, *DeleteStorageObjectRequest) (*empty.Empty, error)
	// Delete (non-recorded) all user accounts.
	DeleteUsers(context.Context, *empty.Empty) (*empty.Empty, error)
	// Delete a wallet ledger item.
	DeleteWalletLedger(context.Context, *DeleteWalletLedgerRequest) (*empty.Empty, error)
	// Export all information stored about a user account.
	ExportAccount(context.Context, *AccountId) (*AccountExport, error)
	// Get detailed account information for a single user.
	GetAccount(context.Context, *AccountId) (*Account, error)
	// Get server config and configuration warnings.
	GetConfig(context.Context, *empty.Empty) (*Config, error)
	// Get a user's list of friend relationships.
	GetFriends(context.Context, *AccountId) (*api.FriendList, error)
	// Get a list of groups the user is a member of.
	GetGroups(context.Context, *AccountId) (*api.UserGroupList, error)
	// Get current status data for all nodes.
	GetStatus(context.Context, *empty.Empty) (*StatusList, error)
	// Get a storage object.
	GetStorage(context.Context, *api.ReadStorageObjectId) (*api.StorageObject, error)
	// Get a list of the user's wallet transactions.
	GetWalletLedger(context.Context, *AccountId) (*WalletLedgerList, error)
	// List (and optionally filter) storage data.
	ListStorage(context.Context, *ListStorageRequest) (*StorageList, error)
	// List (and optionally filter) users.
	ListUsers(context.Context, *ListUsersRequest) (*UserList, error)
	// Unban a user.
	UnbanUser(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the custom ID from a user account.
	UnlinkCustom(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the device ID from a user account.
	UnlinkDevice(context.Context, *UnlinkDeviceRequest) (*empty.Empty, error)
	// Unlink the email from a user account.
	UnlinkEmail(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the Apple ID from a user account.
	UnlinkApple(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the Facebook ID from a user account.
	UnlinkFacebook(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the Facebook Instant Game ID from a user account.
	UnlinkFacebookInstantGame(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the Game Center ID from a user account.
	UnlinkGameCenter(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the Google ID from a user account.
	UnlinkGoogle(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the Steam ID from a user account.
	UnlinkSteam(context.Context, *AccountId) (*empty.Empty, error)
	// Update one or more fields on a user account.
	UpdateAccount(context.Context, *UpdateAccountRequest) (*empty.Empty, error)
	// Write a new storage object or replace an existing one.
	WriteStorageObject(context.Context, *WriteStorageObjectRequest) (*api.StorageObjectAck, error)
}

<<<<<<< HEAD
// UnimplementedConsoleServer can be embedded to have forward compatible implementations.
type UnimplementedConsoleServer struct {
}

func (*UnimplementedConsoleServer) Authenticate(context.Context, *AuthenticateRequest) (*ConsoleSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (*UnimplementedConsoleServer) BanUser(context.Context, *AccountId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (*UnimplementedConsoleServer) DeleteAccount(context.Context, *AccountDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (*UnimplementedConsoleServer) DeleteFriend(context.Context, *DeleteFriendRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (*UnimplementedConsoleServer) DeleteGroupUser(context.Context, *DeleteGroupUserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupUser not implemented")
}
func (*UnimplementedConsoleServer) DeleteStorage(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorage not implemented")
}
func (*UnimplementedConsoleServer) DeleteStorageObject(context.Context, *DeleteStorageObjectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorageObject not implemented")
}
func (*UnimplementedConsoleServer) DeleteUsers(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsers not implemented")
}
func (*UnimplementedConsoleServer) DeleteWalletLedger(context.Context, *DeleteWalletLedgerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWalletLedger not implemented")
}
func (*UnimplementedConsoleServer) ExportAccount(context.Context, *AccountId) (*AccountExport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAccount not implemented")
}
func (*UnimplementedConsoleServer) GetAccount(context.Context, *AccountId) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedConsoleServer) GetConfig(context.Context, *empty.Empty) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedConsoleServer) GetFriends(context.Context, *AccountId) (*api.FriendList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}
func (*UnimplementedConsoleServer) GetGroups(context.Context, *AccountId) (*api.UserGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (*UnimplementedConsoleServer) GetStatus(context.Context, *empty.Empty) (*StatusList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedConsoleServer) GetStorage(context.Context, *api.ReadStorageObjectId) (*api.StorageObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorage not implemented")
}
func (*UnimplementedConsoleServer) GetWalletLedger(context.Context, *AccountId) (*WalletLedgerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletLedger not implemented")
}
func (*UnimplementedConsoleServer) ListStorage(context.Context, *ListStorageRequest) (*StorageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStorage not implemented")
}
func (*UnimplementedConsoleServer) ListUsers(context.Context, *ListUsersRequest) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedConsoleServer) UnbanUser(context.Context, *AccountId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanUser not implemented")
}
func (*UnimplementedConsoleServer) UnlinkCustom(context.Context, *AccountId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkCustom not implemented")
}
func (*UnimplementedConsoleServer) UnlinkDevice(context.Context, *UnlinkDeviceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkDevice not implemented")
}
func (*UnimplementedConsoleServer) UnlinkEmail(context.Context, *AccountId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkEmail not implemented")
}
func (*UnimplementedConsoleServer) UnlinkApple(context.Context, *AccountId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkApple not implemented")
}
func (*UnimplementedConsoleServer) UnlinkFacebook(context.Context, *AccountId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkFacebook not implemented")
}
func (*UnimplementedConsoleServer) UnlinkFacebookInstantGame(context.Context, *AccountId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkFacebookInstantGame not implemented")
}
func (*UnimplementedConsoleServer) UnlinkGameCenter(context.Context, *AccountId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkGameCenter not implemented")
}
func (*UnimplementedConsoleServer) UnlinkGoogle(context.Context, *AccountId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkGoogle not implemented")
}
func (*UnimplementedConsoleServer) UnlinkSteam(context.Context, *AccountId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkSteam not implemented")
}
func (*UnimplementedConsoleServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (*UnimplementedConsoleServer) WriteStorageObject(context.Context, *WriteStorageObjectRequest) (*api.StorageObjectAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteStorageObject not implemented")
}

=======
>>>>>>> e5902fc3... Reimplement Nakama Console with Angular 10.
func RegisterConsoleServer(s *grpc.Server, srv ConsoleServer) {
	s.RegisterService(&_Console_serviceDesc, srv)
}

func _Console_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/BanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).BanUser(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteAccount(ctx, req.(*AccountDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteFriend(ctx, req.(*DeleteFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteGroupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteGroupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteGroupUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteGroupUser(ctx, req.(*DeleteGroupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteStorage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteStorageObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStorageObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteStorageObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteStorageObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteStorageObject(ctx, req.(*DeleteStorageObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteWalletLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWalletLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteWalletLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteWalletLedger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteWalletLedger(ctx, req.(*DeleteWalletLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_ExportAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).ExportAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/ExportAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).ExportAccount(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetAccount(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetFriends(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetGroups(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ReadStorageObjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetStorage(ctx, req.(*api.ReadStorageObjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetWalletLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetWalletLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetWalletLedger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetWalletLedger(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_ListStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).ListStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/ListStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).ListStorage(ctx, req.(*ListStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnbanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnbanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnbanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnbanUser(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkCustom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkCustom(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkDevice(ctx, req.(*UnlinkDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkEmail(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkApple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkApple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkApple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkApple(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkFacebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkFacebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkFacebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkFacebook(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkFacebookInstantGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkFacebookInstantGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkFacebookInstantGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkFacebookInstantGame(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkGameCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkGameCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkGameCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkGameCenter(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkGoogle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkGoogle(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkSteam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkSteam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkSteam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkSteam(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_WriteStorageObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteStorageObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).WriteStorageObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/WriteStorageObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).WriteStorageObject(ctx, req.(*WriteStorageObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Console_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.console.Console",
	HandlerType: (*ConsoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Console_Authenticate_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _Console_BanUser_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _Console_DeleteAccount_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _Console_DeleteFriend_Handler,
		},
		{
			MethodName: "DeleteGroupUser",
			Handler:    _Console_DeleteGroupUser_Handler,
		},
		{
			MethodName: "DeleteStorage",
			Handler:    _Console_DeleteStorage_Handler,
		},
		{
			MethodName: "DeleteStorageObject",
			Handler:    _Console_DeleteStorageObject_Handler,
		},
		{
			MethodName: "DeleteUsers",
			Handler:    _Console_DeleteUsers_Handler,
		},
		{
			MethodName: "DeleteWalletLedger",
			Handler:    _Console_DeleteWalletLedger_Handler,
		},
		{
			MethodName: "ExportAccount",
			Handler:    _Console_ExportAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Console_GetAccount_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Console_GetConfig_Handler,
		},
		{
			MethodName: "GetFriends",
			Handler:    _Console_GetFriends_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _Console_GetGroups_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Console_GetStatus_Handler,
		},
		{
			MethodName: "GetStorage",
			Handler:    _Console_GetStorage_Handler,
		},
		{
			MethodName: "GetWalletLedger",
			Handler:    _Console_GetWalletLedger_Handler,
		},
		{
			MethodName: "ListStorage",
			Handler:    _Console_ListStorage_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Console_ListUsers_Handler,
		},
		{
			MethodName: "UnbanUser",
			Handler:    _Console_UnbanUser_Handler,
		},
		{
			MethodName: "UnlinkCustom",
			Handler:    _Console_UnlinkCustom_Handler,
		},
		{
			MethodName: "UnlinkDevice",
			Handler:    _Console_UnlinkDevice_Handler,
		},
		{
			MethodName: "UnlinkEmail",
			Handler:    _Console_UnlinkEmail_Handler,
		},
		{
			MethodName: "UnlinkApple",
			Handler:    _Console_UnlinkApple_Handler,
		},
		{
			MethodName: "UnlinkFacebook",
			Handler:    _Console_UnlinkFacebook_Handler,
		},
		{
			MethodName: "UnlinkFacebookInstantGame",
			Handler:    _Console_UnlinkFacebookInstantGame_Handler,
		},
		{
			MethodName: "UnlinkGameCenter",
			Handler:    _Console_UnlinkGameCenter_Handler,
		},
		{
			MethodName: "UnlinkGoogle",
			Handler:    _Console_UnlinkGoogle_Handler,
		},
		{
			MethodName: "UnlinkSteam",
			Handler:    _Console_UnlinkSteam_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Console_UpdateAccount_Handler,
		},
		{
			MethodName: "WriteStorageObject",
			Handler:    _Console_WriteStorageObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "console.proto",
}
